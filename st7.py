{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bfad9057-4adb-410e-b0b9-f0f0360c50ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import altair as a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c3ed8265-ddbe-47cd-94cc-27f7b8ecdb10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting the Page configuration\n",
    "st.set_page_config(page_title=\"FIFA Player Stats Dashboard\", page_icon=\":bar_chart:\", layout=\"wide\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "443349fb-f100-4ad8-9f23-c0083401f956",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-17 19:44:26.249 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\ProgramData\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Setting the dashboard title\n",
    "st.title(\":bar_chart: FIFA Player Stats Dashboard\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f21d2b8d-bd71-4234-86e1-143d720a2148",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make the title appear above\n",
    "st.markdown('<style>div.block-container{padding-top:1rem;}</style>', unsafe_allow_html=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d6a3d07f-9f91-4918-a3f1-2512f6de2fbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Nandini\\AppData\\Local\\Temp\\ipykernel_1804\\927395987.py:22: DtypeWarning: Columns (69,70,71,72,73,79,80,81,82,83,84) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(r\"final.csv\")\n"
     ]
    }
   ],
   "source": [
    "# File uploader widget\n",
    "\n",
    "fl = st.file_uploader(':file_folder: Upload a file', type=[\"csv\", \"txt\", \"xlsx\", \"xls\"])\n",
    "\n",
    "# Check if a file has been uploaded\n",
    "if fl is not None:\n",
    "    filename = fl.name\n",
    "    st.write(f\"Uploaded file: {filename}\")\n",
    "\n",
    "    # Determine the file extension and read accordingly\n",
    "    if filename.endswith('.csv'):\n",
    "        df = pd.read_csv(fl)\n",
    "    elif filename.endswith('.txt'):\n",
    "        df = pd.read_csv(fl, delimiter='\\t')\n",
    "    elif filename.endswith('.xlsx') or filename.endswith('.xls'):\n",
    "        df = pd.read_excel(fl)\n",
    "    else:\n",
    "        st.error(\"Unsupported file format\")\n",
    "else:\n",
    "    st.write(\"No file uploaded, using default file.\")\n",
    "    os.chdir(r\"C:\\Users\\Nandini\\Desktop\\FORE\\streamlit\")\n",
    "    df = pd.read_csv(r\"final.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f3b2fe37-8cdf-45b8-9a6b-5147374476d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Sample DataFrame for demonstration (use your df here)\n",
    "# df = pd.read_csv('your_data.csv')  # Ensure to use your actual data\n",
    "\n",
    "# Define wage ranges\n",
    "wage_ranges = [\n",
    "    (0, 100000), (100001, 200000), (200001, 300000), (300001, 400000),\n",
    "    (400001, 500000), (500001, 600000), (600001, 700000), (700001, 800000),\n",
    "    (800001, 900000), (900001, 1000000)\n",
    "]\n",
    "wage_range_labels = [f\"{low:,} - {high:,}\" for low, high in wage_ranges]\n",
    "\n",
    "# Create options for player tags\n",
    "player_tags_columns = ['player_tags_1', 'player_tags_2', 'player_tags_3',\n",
    "                       'player_tags_4', 'player_tags_5', 'player_tags_6', 'player_tags_7']\n",
    "player_tags = sorted(set(tag for col in player_tags_columns for tag in df[col].dropna().unique()))\n",
    "player_tags_options = [tag for tag in player_tags]\n",
    "\n",
    "# Sidebar for FIFA version selection\n",
    "st.sidebar.header(\"Filters\")\n",
    "fifa_version = st.sidebar.selectbox(\n",
    "    \"Select FIFA Version\",\n",
    "    sorted(df['fifa_version'].unique())\n",
    ")\n",
    "\n",
    "# Filtered DataFrame based on FIFA version\n",
    "df_fifa = df[df['fifa_version'] == fifa_version] if fifa_version else df\n",
    "\n",
    "# Player position selection\n",
    "player_positions = sorted(df_fifa['player_positions_1'].dropna().unique())\n",
    "player_position = st.sidebar.selectbox(\n",
    "    \"Select Player Position\",\n",
    "    player_positions\n",
    ")\n",
    "\n",
    "# League name selection\n",
    "leagues = sorted(df_fifa[df_fifa['player_positions_1'] == player_position]['league_name'].dropna().unique()) if player_position else []\n",
    "league_name = st.sidebar.selectbox(\n",
    "    \"Select League Name\",\n",
    "    leagues\n",
    ")\n",
    "\n",
    "# Club name selection\n",
    "clubs = sorted(df_fifa[(df_fifa['player_positions_1'] == player_position) & (df_fifa['league_name'] == league_name)]['club_name'].dropna().unique()) if league_name else []\n",
    "club_name = st.sidebar.selectbox(\n",
    "    \"Select Club Name\",\n",
    "    clubs\n",
    ")\n",
    "\n",
    "# First Visualization: Player Position Bar Chart\n",
    "if club_name:\n",
    "    filtered_df = df_fifa[(df_fifa['player_positions_1'] == player_position) &\n",
    "                          (df_fifa['league_name'] == league_name) &\n",
    "                          (df_fifa['club_name'] == club_name)]\n",
    "    \n",
    "    if not filtered_df.empty:\n",
    "        fig = px.bar(filtered_df, x='short_name', y=['overall', 'potential', 'value_eur', 'age'],\n",
    "                     barmode='group', labels={'value': 'Value (€)'})\n",
    "        st.subheader(\"Player Stats by Position\")\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "# Second Visualization: Wage Range Treemap\n",
    "wage_range_index = st.sidebar.selectbox(\n",
    "    \"Select Wage Range\",\n",
    "    list(range(len(wage_range_labels))),\n",
    "    format_func=lambda x: wage_range_labels[x]\n",
    ")\n",
    "\n",
    "low, high = wage_ranges[wage_range_index]\n",
    "filtered_df_wage = df_fifa[(df_fifa['wage_eur'] >= low) & (df_fifa['wage_eur'] <= high)]\n",
    "\n",
    "if not filtered_df_wage.empty:\n",
    "    fig = px.treemap(\n",
    "        filtered_df_wage,\n",
    "        path=['player_positions_1'],\n",
    "        values='wage_eur',\n",
    "        title='Player Positions Treemap'\n",
    "    )\n",
    "    st.subheader(\"Player Stats by Wage Range\")\n",
    "    st.plotly_chart(fig)\n",
    "\n",
    "    # Display player details\n",
    "    selected_position = st.selectbox(\"Select Player Position from Treemap\", sorted(filtered_df_wage['player_positions_1'].unique()))\n",
    "    filtered_details = filtered_df_wage[filtered_df_wage['player_positions_1'] == selected_position]\n",
    "    \n",
    "    if not filtered_details.empty:\n",
    "        st.write(\"Player Details:\")\n",
    "        st.dataframe(filtered_details[['short_name', 'player_positions_1', 'nationality_name', 'club_name', 'wage_eur', 'value_eur', 'overall', 'potential', 'age']])\n",
    "\n",
    "# Third Visualization: Player Tags Bar Chart\n",
    "selected_tags = st.sidebar.multiselect(\n",
    "    \"Select Player Tags\",\n",
    "    options=player_tags_options\n",
    ")\n",
    "\n",
    "if selected_tags:\n",
    "    filtered_df_tags = df[df[player_tags_columns].isin(selected_tags).any(axis=1)]\n",
    "    players = sorted(filtered_df_tags['short_name'].unique())\n",
    "    selected_players = st.sidebar.multiselect(\n",
    "        \"Select Player Names\",\n",
    "        options=players\n",
    "    )\n",
    "    \n",
    "    if selected_players:\n",
    "        filtered_df_players = filtered_df_tags[filtered_df_tags['short_name'].isin(selected_players)]\n",
    "        fig = px.bar(filtered_df_players, x='short_name', y=['overall', 'potential', 'value_eur', 'age'],\n",
    "                     barmode='group', labels={'value': 'Value (€)'})\n",
    "        st.subheader(\"Player Stats by Tags\")\n",
    "        st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "61e0d77b-8059-41c6-aa0f-31d07517af4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Load your data into df (replace with your actual data loading code)\n",
    "# df = pd.read_csv('your_data.csv')  # Example data loading line\n",
    "\n",
    "# Streamlit App Layout\n",
    "st.title(\"FIFA Player Stats Dashboard\")\n",
    "\n",
    "# Get unique options for dropdowns\n",
    "fifa_versions = sorted(df['fifa_version'].unique())\n",
    "player_positions = sorted(df['player_positions_1'].dropna().unique()) if not df.empty else []\n",
    "league_names = sorted(df['league_name'].dropna().unique()) if not df.empty else []\n",
    "club_names = sorted(df['club_name'].dropna().unique()) if not df.empty else []\n",
    "\n",
    "# Function to plot the chart\n",
    "def plot_chart(data):\n",
    "    fig = px.bar(data, x='short_name', y=['overall', 'potential', 'value_eur', 'age'],\n",
    "                 barmode='group', labels={'value_eur': 'Value (€)'})\n",
    "    st.plotly_chart(fig)\n",
    "\n",
    "# Display a default chart with full data\n",
    "st.subheader(\"Player Stats - Full Data\")\n",
    "plot_chart(df)\n",
    "\n",
    "# Add a horizontal line\n",
    "st.markdown(\"---\")\n",
    "\n",
    "# Add slicers to filter data\n",
    "st.sidebar.header(\"Filters\")\n",
    "\n",
    "# Dropdowns for selecting FIFA version, player positions, league name, and club name\n",
    "fifa_version = st.sidebar.selectbox(\"Select FIFA Version\", options=[''] + fifa_versions)\n",
    "player_position = st.sidebar.selectbox(\"Select Player Position\", options=[''] + player_positions if fifa_version else [], index=0 if player_positions else -1)\n",
    "league_name = st.sidebar.selectbox(\"Select League Name\", options=[''] + league_names if player_position else [], index=0 if league_names else -1)\n",
    "club_name = st.sidebar.selectbox(\"Select Club Name\", options=[''] + club_names if league_name and league_name != 'N/A' else [], index=0 if club_names else -1)\n",
    "\n",
    "# Filter data based on selected options\n",
    "filtered_df = df[\n",
    "    (df['fifa_version'] == fifa_version) &\n",
    "    (df['player_positions_1'] == player_position) &\n",
    "    (df['league_name'] == league_name) &\n",
    "    (df['club_name'] == club_name)\n",
    "]\n",
    "\n",
    "# Display the filtered chart\n",
    "st.subheader(\"Filtered Player Stats\")\n",
    "if not filtered_df.empty:\n",
    "    plot_chart(filtered_df)\n",
    "else:\n",
    "    st.write(\"No data available for the selected filters.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5c9c78d5-b772-412b-bcf8-a053c3cdc477",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import statsmodels.formula.api as smf\n",
    "import altair as alt\n",
    "\n",
    "# Assuming df is your DataFrame\n",
    "# Drop rows with missing values in relevant columns\n",
    "df_clean = df[['value_eur', 'overall', 'potential', 'age', 'wage_eur', 'international_reputation', 'player_positions_1', 'skill_moves']].dropna()\n",
    "\n",
    "# Convert categorical variable to one-hot encoded variables\n",
    "df_clean = pd.get_dummies(df_clean, columns=['player_positions_1'], drop_first=True)\n",
    "\n",
    "# Define the regression model\n",
    "model = smf.ols('value_eur ~ overall + potential + age + wage_eur + international_reputation + skill_moves + ' + \n",
    "                ' + '.join(df_clean.columns[df_clean.columns.str.startswith('player_positions_1')]), data=df_clean).fit()\n",
    "\n",
    "# Streamlit app\n",
    "st.title('Player Value Prediction')\n",
    "\n",
    "# Input fields for the player's details\n",
    "overall = st.number_input('Overall', min_value=0, max_value=100, value=75)\n",
    "potential = st.number_input('Potential', min_value=0, max_value=100, value=80)\n",
    "age = st.number_input('Age', min_value=16, max_value=50, value=25)\n",
    "wage_eur = st.number_input('Wage (EUR)', min_value=0, value=50000)\n",
    "international_reputation = st.selectbox('International Reputation', options=[1, 2, 3, 4, 5])\n",
    "skill_moves = st.selectbox('Skill Moves', options=[1, 2, 3, 4, 5])\n",
    "\n",
    "# Dropdown for player position (one-hot encoded)\n",
    "player_position = st.selectbox('Player Position', options=df['player_positions_1'].unique())\n",
    "\n",
    "# Create a DataFrame for prediction based on the input values\n",
    "input_data = pd.DataFrame({\n",
    "    'overall': [overall],\n",
    "    'potential': [potential],\n",
    "    'age': [age],\n",
    "    'wage_eur': [wage_eur],\n",
    "    'international_reputation': [international_reputation],\n",
    "    'skill_moves': [skill_moves],\n",
    "    **{f'player_positions_1_{pos}': [1 if player_position == pos else 0] for pos in df['player_positions_1'].unique() if pos != df['player_positions_1'].unique()[0]}\n",
    "})\n",
    "\n",
    "# Button to trigger prediction\n",
    "if st.button('Predict Value (EUR)'):\n",
    "    predicted_value = model.predict(input_data)[0]\n",
    "    st.write(f\"Predicted Value (EUR): {predicted_value:,.2f}\")\n",
    "    \n",
    "    # Prepare data for chart\n",
    "    df_chart = pd.DataFrame({\n",
    "        'Type': ['Actual Values', 'Predicted Value'],\n",
    "        'Value (EUR)': [df_clean['value_eur'].mean(), predicted_value]\n",
    "    })\n",
    "\n",
    "    # Create a bar chart to compare actual vs. predicted value\n",
    "    chart = alt.Chart(df_chart).mark_bar().encode(\n",
    "        x='Type',\n",
    "        y='Value (EUR)',\n",
    "        color='Type'\n",
    "    ).properties(\n",
    "        width=alt.Step(80)  # Controls the width of the bars\n",
    "    )\n",
    "\n",
    "    st.altair_chart(chart)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0adc341-7be2-41a5-bee0-b6ab2ae7ac58",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4638c7c1-81bf-4b08-83c2-bfd8a9dceb1e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40d5da98-52ea-4ebe-8492-e92861b0b706",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "294bf448-388e-4091-bf93-87ea65e68f54",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd6a9f80-a8e5-494f-91ab-07d4d13142de",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91354954-63a4-491e-859a-a7a75e98ef03",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "386fed55-be34-42da-82f9-f0b42b761fed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Load your data into df (replace with your actual data loading code)\n",
    "# df = pd.read_csv('your_data.csv')  # Example data loading line\n",
    "\n",
    "# Define wage ranges\n",
    "wage_ranges = [\n",
    "    (0, 100000), (100001, 200000), (200001, 300000), (300001, 400000),\n",
    "    (400001, 500000), (500001, 600000), (600001, 700000), (700001, 800000),\n",
    "    (800001, 900000), (900001, 1000000)\n",
    "]\n",
    "\n",
    "# Create wage range labels\n",
    "wage_range_labels = [f\"{low:,} - {high:,}\" for low, high in wage_ranges]\n",
    "\n",
    "# Streamlit App Layout\n",
    "st.title(\"FIFA Player Stats Dashboard\")\n",
    "\n",
    "# Create columns for layout\n",
    "col1, col2 = st.columns([1, 2])\n",
    "\n",
    "with col1:\n",
    "    # Dropdown for selecting FIFA version\n",
    "    fifa_versions = sorted(df['fifa_version'].unique())\n",
    "    fifa_version = st.selectbox(\"Select FIFA Version\", options=[''] + fifa_versions, key='fifa_version_selectbox')\n",
    "\n",
    "    # Dropdown for selecting wage range\n",
    "    wage_range_index = st.selectbox(\"Select Wage Range\", options=list(range(len(wage_range_labels))), format_func=lambda x: wage_range_labels[x] if x is not None else 'Select Wage Range', key='wage_range_selectbox')\n",
    "\n",
    "with col2:\n",
    "    # Filter data based on selected FIFA version and wage range\n",
    "    def get_filtered_data(fifa_version, wage_range_index):\n",
    "        if fifa_version is None or wage_range_index is None:\n",
    "            return pd.DataFrame()  # Return empty DataFrame if no filter applied\n",
    "\n",
    "        filtered_df = df[df['fifa_version'] == fifa_version]\n",
    "        low, high = wage_ranges[wage_range_index]\n",
    "        filtered_df = filtered_df[(filtered_df['wage_eur'] >= low) & (filtered_df['wage_eur'] <= high)]\n",
    "        \n",
    "        return filtered_df\n",
    "\n",
    "    # Display the treemap for player positions\n",
    "    filtered_df = get_filtered_data(fifa_version, wage_range_index)\n",
    "\n",
    "    if not filtered_df.empty:\n",
    "        fig = px.treemap(\n",
    "            filtered_df,\n",
    "            path=['player_positions_1'],\n",
    "            values='wage_eur',\n",
    "            title='Player Positions Treemap'\n",
    "        )\n",
    "        st.plotly_chart(fig)\n",
    "    else:\n",
    "        st.write(\"No data available for the selected filters.\")\n",
    "\n",
    "    st.markdown(\"---\")  # Adding a horizontal line\n",
    "\n",
    "    # Display player details based on selection from treemap\n",
    "    selected_position = st.selectbox(\"Select Player Position from Treemap\", options=[''] + sorted(filtered_df['player_positions_1'].dropna().unique()) if not filtered_df.empty else [], key='position_selectbox')\n",
    "\n",
    "    if selected_position:\n",
    "        position_filtered_df = filtered_df[filtered_df['player_positions_1'] == selected_position]\n",
    "\n",
    "        if not position_filtered_df.empty:\n",
    "            st.subheader(\"Player Details\")\n",
    "            table = pd.DataFrame({\n",
    "                'Short Name': position_filtered_df['short_name'],\n",
    "                'Position': position_filtered_df['player_positions_1'],\n",
    "                'Nationality': position_filtered_df['nationality_name'],\n",
    "                'Club Name': position_filtered_df['club_name'],\n",
    "                'Wage EUR': position_filtered_df['wage_eur'].apply(lambda x: f\"{x:,}\"),\n",
    "                'Value EUR': position_filtered_df['value_eur'].apply(lambda x: f\"{x:,}\"),\n",
    "                'Overall': position_filtered_df['overall'],\n",
    "                'Potential': position_filtered_df['potential'],\n",
    "                'Age': position_filtered_df['age']\n",
    "            })\n",
    "\n",
    "            st.dataframe(table)\n",
    "        else:\n",
    "            st.write(\"No players found for the selected position.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "657eb73a-8cd6-4189-b223-50ef3b01b784",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Nandini\\AppData\\Local\\Temp\\ipykernel_10020\\2560133302.py:33: DtypeWarning:\n",
      "\n",
      "Columns (69,70,71,72,73,79,80,81,82,83,84) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Setting the Page configuration\n",
    "st.set_page_config(page_title=\"FIFA Player Stats Dashboard\", page_icon=\":bar_chart:\", layout=\"wide\")\n",
    "\n",
    "# Setting the dashboard title\n",
    "st.title(\":bar_chart: FIFA Player Stats Dashboard\")\n",
    "\n",
    "# Make the title appear above\n",
    "st.markdown('<style>div.block-container{padding-top:1rem;}</style>', unsafe_allow_html=True)\n",
    "\n",
    "# File uploader widget\n",
    "fl = st.file_uploader(':file_folder: Upload a file', type=[\"csv\", \"txt\", \"xlsx\", \"xls\"])\n",
    "\n",
    "# Check if a file has been uploaded\n",
    "if fl is not None:\n",
    "    filename = fl.name\n",
    "    st.write(f\"Uploaded file: {filename}\")\n",
    "\n",
    "    # Determine the file extension and read accordingly\n",
    "    if filename.endswith('.csv'):\n",
    "        df = pd.read_csv(fl)\n",
    "    elif filename.endswith('.txt'):\n",
    "        df = pd.read_csv(fl, delimiter='\\t')\n",
    "    elif filename.endswith('.xlsx') or filename.endswith('.xls'):\n",
    "        df = pd.read_excel(fl)\n",
    "    else:\n",
    "        st.error(\"Unsupported file format\")\n",
    "else:\n",
    "    st.write(\"No file uploaded, using default file.\")\n",
    "    df = pd.read_csv(r\"C:\\Users\\Nandini\\Desktop\\FORE\\streamlit\\final.csv\")\n",
    "\n",
    "# Ensure DataFrame is not empty\n",
    "if df.empty:\n",
    "    st.error(\"The data file is empty. Please upload a valid file.\")\n",
    "else:\n",
    "    # Create options for dropdowns\n",
    "    fifa_versions = sorted(df['fifa_version'].unique())\n",
    "    player_positions = sorted(df['player_positions_1'].dropna().unique()) if not df.empty else []\n",
    "    league_names = sorted(df['league_name'].dropna().unique()) if not df.empty else []\n",
    "    club_names = sorted(df['club_name'].dropna().unique()) if not df.empty else []\n",
    "\n",
    "    # Define a function to plot bar charts\n",
    "    def plot_bar_chart(data):\n",
    "        fig = px.bar(data, x='short_name', y=['overall', 'potential', 'value_eur', 'age'],\n",
    "                     barmode='group', labels={'value_eur': 'Value (€)'})\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    # Chart 1: Full Data\n",
    "    st.subheader(\"Player Stats - Full Data\")\n",
    "    col1, col2 = st.columns([1, 2])  # Creating two columns for slicers and chart\n",
    "    \n",
    "    with col1:\n",
    "        st.write(\"Use the slicers on the left to filter the data.\")\n",
    "    \n",
    "    with col2:\n",
    "        plot_bar_chart(df)\n",
    "\n",
    "    st.markdown(\"---\")  # Add a dividing line\n",
    "\n",
    "    # Slicers for filtered data\n",
    "    st.sidebar.header(\"Filters\")\n",
    "\n",
    "    # Dropdowns for selecting FIFA version, player positions, league name, and club name\n",
    "    fifa_version = st.sidebar.selectbox(\"Select FIFA Version\", options=[''] + fifa_versions)\n",
    "    player_position = st.sidebar.selectbox(\"Select Player Position\", options=[''] + player_positions if fifa_version else [], index=0 if player_positions else -1)\n",
    "    league_name = st.sidebar.selectbox(\"Select League Name\", options=[''] + league_names if player_position else [], index=0 if league_names else -1)\n",
    "    club_name = st.sidebar.selectbox(\"Select Club Name\", options=[''] + club_names if league_name and league_name != 'N/A' else [], index=0 if club_names else -1)\n",
    "\n",
    "    # Filter data based on selected options\n",
    "    filtered_df = df[(df['fifa_version'] == fifa_version) &\n",
    "                      (df['player_positions_1'] == player_position) &\n",
    "                      (df['league_name'] == league_name) &\n",
    "                      (df['club_name'] == club_name)]\n",
    "\n",
    "    # Chart 2: Filtered Data\n",
    "    st.subheader(\"Filtered Player Stats\")\n",
    "    col1, col2 = st.columns([1, 2])  # Creating two columns for slicers and chart\n",
    "    \n",
    "    with col1:\n",
    "        st.write(\"Adjust filters in the sidebar to update the chart.\")\n",
    "    \n",
    "    with col2:\n",
    "        if not filtered_df.empty:\n",
    "            plot_bar_chart(filtered_df)\n",
    "        else:\n",
    "            st.write(\"No data available for the selected filters.\")\n",
    "\n",
    "    st.markdown(\"---\")  # Add a dividing line\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a30a109d-9cb9-40c7-a098-258e9deada9b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30ca0091-d1ff-492b-aa97-183c20ec889e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7d5ab07-93d9-4871-a933-67835629dac2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdb969ff-5764-478e-88f9-f4cdb44151d2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "98e8243b-5b95-4abd-9529-7f09b5d3d3ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-16 22:50:11.557 Serialization of dataframe to Arrow table was unsuccessful due to: (\"Expected bytes, got a 'int' object\", 'Conversion failed for column ls_sum with type object'). Applying automatic fixes for column types to make the dataframe Arrow-compatible.\n"
     ]
    }
   ],
   "source": [
    "'''# Define wage ranges\n",
    "wage_ranges = [\n",
    "    (0, 100000), (100001, 200000), (200001, 300000), (300001, 400000),\n",
    "    (400001, 500000), (500001, 600000), (600001, 700000), (700001, 800000),\n",
    "    (800001, 900000), (900001, 1000000)\n",
    "]\n",
    "\n",
    "# Create wage range labels\n",
    "wage_range_labels = [f\"{low:,} - {high:,}\" for low, high in wage_ranges]\n",
    "\n",
    "# Sidebar filters\n",
    "st.sidebar.header(\"Choose your filter:\")\n",
    "\n",
    "# Dropdown for FIFA version\n",
    "fifa_versions = df['fifa_version'].unique()\n",
    "selected_fifa_version = st.sidebar.selectbox(\"Select FIFA Version\", fifa_versions)\n",
    "\n",
    "# Filter by FIFA version\n",
    "if selected_fifa_version:\n",
    "    filtered_df = df[df['fifa_version'] == selected_fifa_version]\n",
    "else:\n",
    "    filtered_df = df\n",
    "\n",
    "# Dropdown for player positions\n",
    "player_positions = filtered_df['player_positions_1'].dropna().unique()\n",
    "selected_player_positions = st.sidebar.multiselect(\"Select Player Positions\", player_positions)\n",
    "\n",
    "if selected_player_positions:\n",
    "    filtered_df = filtered_df[filtered_df['player_positions_1'].isin(selected_player_positions)]\n",
    "\n",
    "# Dropdown for league name\n",
    "league_names = filtered_df['league_name'].dropna().unique()\n",
    "selected_leagues = st.sidebar.multiselect(\"Select League Name\", league_names)\n",
    "\n",
    "if selected_leagues:\n",
    "    filtered_df = filtered_df[filtered_df['league_name'].isin(selected_leagues)]\n",
    "\n",
    "# Dropdown for club name\n",
    "club_names = filtered_df['club_name'].dropna().unique()\n",
    "selected_clubs = st.sidebar.multiselect(\"Select Club Name\", club_names)\n",
    "\n",
    "if selected_clubs:\n",
    "    filtered_df = filtered_df[filtered_df['club_name'].isin(selected_clubs)]\n",
    "\n",
    "# Dropdown for wage range\n",
    "selected_wage_range_index = st.sidebar.selectbox(\n",
    "    \"Select Wage Range\",\n",
    "    options=list(range(len(wage_ranges))),  # Provide indices for wage ranges\n",
    "    format_func=lambda x: wage_range_labels[x]  # Display labels\n",
    ")\n",
    "\n",
    "# Extract selected wage range\n",
    "low, high = wage_ranges[selected_wage_range_index]\n",
    "\n",
    "# Filter by wage range\n",
    "filtered_df = filtered_df[(filtered_df['wage_eur'] >= low) & (filtered_df['wage_eur'] <= high)]\n",
    "\n",
    "# Custom CSS to change selected item color to green\n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <style>\n",
    "    /* Target the selected options in the multiselect widget */\n",
    "    .css-1n76uvr, .css-1n76uvr * {\n",
    "        color: #28B463 !important;\n",
    "    }\n",
    "\n",
    "    /* Additional styles for the multiselect dropdown */\n",
    "    .css-1vbd788 .css-1n76uvr, .css-1vbd788 .css-1n76uvr * {\n",
    "        color: #28B463 !important;\n",
    "    }\n",
    "\n",
    "    /* Additional style for the selected tags */\n",
    "    .stMultiSelect [data-baseweb=\"tag\"] {\n",
    "        background-color: #28B463 !important;\n",
    "        color: white !important;\n",
    "    }\n",
    "    </style>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True\n",
    ")\n",
    "\n",
    "# Display filtered data (example)\n",
    "st.write(\"Filtered Data\", filtered_df)''''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "65a8c8b9-dfc8-4144-97af-6b4fcf74d08b",
   "metadata": {},
   "outputs": [],
   "source": [
    "''''# Bar chart to display player stats\n",
    "if not filtered_df.empty:\n",
    "    fig = px.bar(\n",
    "        filtered_df,\n",
    "        x='short_name',\n",
    "        y=['overall', 'potential', 'value_eur', 'age'],\n",
    "        barmode='group',\n",
    "        labels={'value': 'Value (€)'}\n",
    "    )\n",
    "    st.plotly_chart(fig, use_container_width=True)\n",
    "else:\n",
    "    st.write(\"No data available for the selected filters.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "ad746cde-b85e-4dc6-8319-ab72e213b6da",
   "metadata": {},
   "outputs": [],
   "source": [
    "''''# Extract the index from the selected tuple\n",
    "if selected_wage_range_index is not None:\n",
    "    wage_range_index = selected_wage_range_index[0]\n",
    "\n",
    "    # Apply wage range filter\n",
    "    low, high = wage_ranges[wage_range_index]\n",
    "    filtered_df = filtered_df[(filtered_df['wage_eur'] >= low) & (filtered_df['wage_eur'] <= high)]\n",
    "\n",
    "    # Check if filtered DataFrame is empty\n",
    "    if filtered_df.empty:\n",
    "        st.write(\"No data available for the selected filters.\")\n",
    "    else:\n",
    "        # Treemap for player positions\n",
    "        fig = px.treemap(\n",
    "            filtered_df,\n",
    "            path=['player_positions_1'],\n",
    "            values='wage_eur',\n",
    "            title='Player Positions Treemap'\n",
    "        )\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "        # Player details table\n",
    "        click_position = st.selectbox(\"Select a Player Position\", filtered_df['player_positions_1'].unique(), key='player_position')\n",
    "\n",
    "        # Filter by player position\n",
    "        position_filtered_df = filtered_df[filtered_df['player_positions_1'] == click_position]\n",
    "\n",
    "        if not position_filtered_df.empty:\n",
    "            st.write(\"Player Details:\")\n",
    "            st.write(position_filtered_df[['short_name', 'player_positions_1', 'nationality_name', 'club_name', 'wage_eur', 'value_eur', 'overall', 'potential', 'age']])\n",
    "        else:\n",
    "            st.write(\"No players found in this position.\")\n",
    "else:\n",
    "    st.write(\"Please select a valid wage range.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63a3e2f7-fbb8-41a0-a796-b55318e4309d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "b5d9e402-a760-4f53-b9eb-7e2f47610d1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "''''# Dropdown for selecting wage range with unique key\n",
    "selected_wage_range_index = st.sidebar.selectbox(\n",
    "    \"Select Wage Range\", \n",
    "    list(enumerate(wage_range_labels)), \n",
    "    format_func=lambda x: x[1],\n",
    "    key='wage_range'\n",
    ")\n",
    "\n",
    "if selected_wage_range_index is not None:\n",
    "    wage_range_index = selected_wage_range_index[0]\n",
    "    low, high = wage_ranges[wage_range_index]\n",
    "    filtered_df = filtered_df[(filtered_df['wage_eur'] >= low) & (filtered_df['wage_eur'] <= high)]\n",
    "\n",
    "# Dropdown for selecting player tags with unique key\n",
    "selected_tags = st.sidebar.multiselect(\"Select Player Tags\", player_tags, key='player_tags')\n",
    "\n",
    "if selected_tags:\n",
    "    filtered_df = filtered_df[\n",
    "        (filtered_df[player_tags_columns].apply(lambda x: any(tag in x.values for tag in selected_tags), axis=1))\n",
    "    ]\n",
    "\n",
    "# Dropdown for selecting player names with unique key\n",
    "selected_names = st.sidebar.multiselect(\"Select Player Names\", filtered_df['short_name'].unique(), key='player_names')\n",
    "\n",
    "if selected_names:\n",
    "    filtered_df = filtered_df[filtered_df['short_name'].isin(selected_names)]\n",
    "\n",
    "# Bar chart to display player stats\n",
    "if not filtered_df.empty:\n",
    "    fig = px.bar(filtered_df, x='short_name', y=['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic',\n",
    "                                                'attacking_finishing', 'goalkeeping_positioning', 'goalkeeping_reflexes'],\n",
    "                 barmode='group', labels={'value': 'Value'})\n",
    "    st.plotly_chart(fig, use_container_width=True)\n",
    "else:\n",
    "    st.write(\"No data available for the selected filters.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caf14b25-b3d6-4ebd-830c-ec43eee081f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''''# Define wage ranges\n",
    "wage_ranges = [\n",
    "    (0, 100000), (100001, 200000), (200001, 300000), (300001, 400000),\n",
    "    (400001, 500000), (500001, 600000), (600001, 700000), (700001, 800000),\n",
    "    (800001, 900000), (900001, 1000000)\n",
    "]\n",
    "\n",
    "# Create wage range labels\n",
    "wage_range_labels = [f\"{low:,} - {high:,}\" for low, high in wage_ranges]\n",
    "\n",
    "# Streamlit app layout\n",
    "st.title(\"FIFA Player Stats Dashboard\")\n",
    "\n",
    "# Dropdown for selecting FIFA version\n",
    "selected_fifa_version = st.selectbox(\"Select FIFA Version\", sorted(df2['fifa_version'].unique()))\n",
    "\n",
    "# Dropdown for selecting player position\n",
    "player_positions = df[df['fifa_version'] == selected_fifa_version]['player_positions_1'].dropna().unique()\n",
    "selected_position = st.selectbox(\"Select Player Position\", sorted(player_positions))\n",
    "\n",
    "# Dropdown for selecting league name\n",
    "leagues = df[(df['fifa_version'] == selected_fifa_version) &\n",
    "              (df['player_positions_1'] == selected_position)]['league_name'].dropna().unique()\n",
    "selected_league = st.selectbox(\"Select League Name\", sorted(leagues))\n",
    "\n",
    "# Dropdown for selecting club name\n",
    "clubs = df[(df['fifa_version'] == selected_fifa_version) &\n",
    "            (df['player_positions_1'] == selected_position) &\n",
    "            (df['league_name'] == selected_league)]['club_name'].dropna().unique()\n",
    "selected_club = st.selectbox(\"Select Club Name\", sorted(clubs))\n",
    "\n",
    "# Filtered DataFrame for player stats bar chart\n",
    "filtered_df = df[(df['fifa_version'] == selected_fifa_version) &\n",
    "                  (df['player_positions_1'] == selected_position) &\n",
    "                  (df['league_name'] == selected_league) &\n",
    "                  (df['club_name'] == selected_club)]\n",
    "\n",
    "if not filtered_df.empty:\n",
    "    st.subheader(\"Player Stats by Position\")\n",
    "    fig_bar = px.bar(filtered_df, x='short_name', y=['overall', 'potential', 'value_eur', 'age'],\n",
    "                     barmode='group', labels={'value': 'Value (€)'})\n",
    "    st.plotly_chart(fig_bar, use_container_width=True)\n",
    "else:\n",
    "    st.write(\"No data available for the selected filters.\")\n",
    "\n",
    "# Dropdown for selecting wage range\n",
    "selected_wage_range_index = st.selectbox(\"Select Wage Range\", range(len(wage_range_labels)), format_func=lambda x: wage_range_labels[x])\n",
    "\n",
    "# Filtered DataFrame for wage range treemap\n",
    "low, high = wage_ranges[selected_wage_range_index]\n",
    "filtered_wage_df = df[(df['wage_eur'] >= low) & (df2['wage_eur'] <= high) &\n",
    "                       (df['fifa_version'] == selected_fifa_version)]\n",
    "\n",
    "if not filtered_wage_df.empty:\n",
    "    st.subheader(\"Player Stats by Wage Range\")\n",
    "    fig_treemap = px.treemap(\n",
    "        filtered_wage_df,\n",
    "        path=['player_positions_1'],\n",
    "        values='wage_eur',\n",
    "        title='Player Positions Treemap'\n",
    "    )\n",
    "    st.plotly_chart(fig_treemap, use_container_width=True)\n",
    "else:\n",
    "    st.write(\"No data available for the selected wage range.\")\n",
    "\n",
    "# Display player details table based on treemap selection\n",
    "click_data = st.plotly_chart(fig_treemap, use_container_width=True, return_click_data=True)\n",
    "if click_data:\n",
    "    player_position = click_data['points'][0]['id']\n",
    "    player_details_df = filtered_wage_df[filtered_wage_df['player_positions_1'] == player_position]\n",
    "\n",
    "    if not player_details_df.empty:\n",
    "        st.subheader(\"Player Details\")\n",
    "        st.write(player_details_df[['short_name', 'player_positions_1', 'nationality_name', 'club_name', 'wage_eur', 'value_eur', 'overall', 'potential', 'age']])\n",
    "    else:\n",
    "        st.write(\"No players found in this filter.\")\n",
    "else:\n",
    "    st.write(\"Select a player position in the treemap to see details.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
